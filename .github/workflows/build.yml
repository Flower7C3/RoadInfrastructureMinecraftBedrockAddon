name: Build, Test & Release Road Infrastructure Addon

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      bp_files: ${{ steps.count_files.outputs.bp_files }}
      rp_files: ${{ steps.count_files.outputs.rp_files }}
      total_blocks: ${{ steps.count_blocks.outputs.total_blocks }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || echo "No requirements.txt found"

      - name: Verify project integrity
        run: python3 verify_all.py

      - name: Build all packages (.mcaddon and .mcpack)
        run: |
          python3 build.py --all

      - name: Count files
        id: count_files
        run: |
          BP_FILES=$(find BP -type f | wc -l)
          RP_FILES=$(find RP -type f | wc -l)
          echo "bp_files=$BP_FILES" >> $GITHUB_OUTPUT
          echo "rp_files=$RP_FILES" >> $GITHUB_OUTPUT
          echo "📦 BP files: $BP_FILES"
          echo "📦 RP files: $RP_FILES"

      - name: Count blocks
        id: count_blocks
        run: |
          TOTAL_BLOCKS=$(find BP/blocks -name "*.block.json" | wc -l)
          echo "total_blocks=$TOTAL_BLOCKS" >> $GITHUB_OUTPUT
          echo "⏹️ Total blocks: $TOTAL_BLOCKS"

      - name: Get version
        id: get_version
        run: |
          VERSION=$(python3 -c "import json; print('.'.join(map(str, json.load(open('BP/manifest.json'))['header']['version'])))")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📋 Version: $VERSION"

      - name: List dist contents
        run: |
          echo "📁 Build artifacts:"
          ls -lh dist/ || echo "No dist directory found"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/*.mcaddon
            dist/*.mcpack
          retention-days: 30

      - name: Commit and push version bump (only on main)
        if: github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add BP/manifest.json RP/manifest.json
          git commit -m "Auto-bump version for release" || exit 0
          git push origin main

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Validate project structure
        run: |
          echo "Checking project structure..."
          test -f build.py || exit 1
          test -d BP || exit 1
          test -d RP || exit 1
          test -f BP/manifest.json || exit 1
          test -f RP/manifest.json || exit 1
          echo "✅ Project structure is valid"

      - name: Validate manifests
        run: |
          echo "Validating manifests..."
          python3 -c "
          import json
          import sys
          # Check BP manifest
          with open('BP/manifest.json', 'r') as f:
              bp_manifest = json.load(f)
          print(f'BP version: {bp_manifest.get(\"header\", {}).get(\"version\", \"missing\")}')
          # Check RP manifest
          with open('RP/manifest.json', 'r') as f:
              rp_manifest = json.load(f)
          print(f'RP version: {rp_manifest.get(\"header\", {}).get(\"version\", \"missing\")}')
          # Check if versions match
          bp_version = bp_manifest.get('header', {}).get('version', [])
          rp_version = rp_manifest.get('header', {}).get('version', [])
          if bp_version != rp_version:
              print('❌ Version mismatch between BP and RP manifests')
              sys.exit(1)
          else:
              print('✅ Manifest versions match')
          "

      - name: Test build artifacts
        run: |
          echo "Testing build artifacts..."
          if [ ! -f dist/*.mcaddon ]; then
            echo "❌ No .mcaddon files found"
            exit 1
          fi
          if [ ! -f dist/*.mcpack ]; then
            echo "❌ No .mcpack files found"
            exit 1
          fi
          echo "✅ Build artifacts present"
      - name: Test package integrity
        run: |
          echo "🧪 Testing package integrity..."
          for file in dist/*.mcaddon dist/*.mcpack; do
            if [ -f "$file" ]; then
              echo "🔍 Testing: $(basename "$file")"
              unzip -t "$file" > /dev/null
              echo "✅ Package integrity verified: $(basename "$file")"
            fi
          done
          echo "🎯 All packages integrity verified successfully!"

  release:
    needs: [ build, test ]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build.outputs.version }}
          name: Release v${{ needs.build.outputs.version }}
          files: |
            dist/*.mcaddon
            dist/*.mcpack
          body: |
            ## Road Infrastructure v${{ needs.build.outputs.version }}

            ### 📦 Zawartość:
            - **RoadInfrastructure.mcaddon** - Kompletny pakiet (lokalna instalacja)
            - **RoadInfrastructure_BP.mcpack** - Behavior Pack (serwery)
            - **RoadInfrastructure_RP.mcpack** - Resource Pack (serwery)

            ### 🛣️ Funkcje:
            - Kompletny system infrastruktury drogowej
            - Oznaczenia i znaki drogowe
            - Elementy piesze (chodniki, przejścia)
            - Wskaźniki skrętów i elementy 3D

            ### 📋 Instalacja:
            **Lokalnie:**
            1. Otwórz plik `.mcaddon` w Minecraft
            2. Aktywuj pakiety w ustawieniach świata

            **Serwer:**
            1. Wgraj oba pliki `.mcpack` na serwer
            2. Aktywuj pakiety w ustawieniach świata

            ### 📊 Statystyki:
            - **${{ needs.build.outputs.total_blocks }} bloków** infrastruktury drogowej
            - **${{ needs.build.outputs.bp_files }} plików BP**
            - **${{ needs.build.outputs.rp_files }} plików RP**

            ### 🚀 Ostatnie zmiany:
            ${{ github.event.head_commit.message }} 
