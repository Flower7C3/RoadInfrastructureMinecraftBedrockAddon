name: Build, Test & Release Road Infrastructure Addon

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      bp_files: ${{ steps.count_files.outputs.bp_files }}
      rp_files: ${{ steps.count_files.outputs.rp_files }}
      total_blocks: ${{ steps.count_blocks.outputs.total_blocks }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || echo "No requirements.txt found"

      - name: Verify project integrity
        run: |
          echo "🔍 Verifying project structure..."
          if [ ! -f "config.json" ]; then
            echo "❌ config.json not found"
            exit 1
          fi
          if [ ! -f "BP/manifest.json" ]; then
            echo "❌ BP/manifest.json not found"
            exit 1
          fi
          if [ ! -f "RP/manifest.json" ]; then
            echo "❌ RP/manifest.json not found"
            exit 1
          fi
          echo "✅ Project structure verified"

      - name: Verify textures
        run: |
          if [ -f "verify_textures.py" ]; then
            python3 verify_textures.py
          else
            echo "⚠️ verify_textures.py not found, skipping texture verification"
          fi

      - name: Build all packages (.mcaddon and .mcpack)
        run: |
          python3 build_enhanced.py --all --no-bump

      - name: Count files
        id: count_files
        run: |
          BP_FILES=$(find BP -type f | wc -l)
          RP_FILES=$(find RP -type f | wc -l)
          echo "bp_files=$BP_FILES" >> $GITHUB_OUTPUT
          echo "rp_files=$RP_FILES" >> $GITHUB_OUTPUT
          echo "📦 BP files: $BP_FILES"
          echo "📦 RP files: $RP_FILES"

      - name: Count blocks
        id: count_blocks
        run: |
          TOTAL_BLOCKS=$(find BP/blocks -name "*.block.json" | wc -l)
          echo "total_blocks=$TOTAL_BLOCKS" >> $GITHUB_OUTPUT
          echo "⏹️ Total blocks: $TOTAL_BLOCKS"

      - name: Get version
        id: get_version
        run: |
          VERSION=$(python3 -c "import json; print('.'.join(map(str, json.load(open('BP/manifest.json'))['header']['version'])))")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📋 Version: $VERSION"

      - name: List dist contents
        run: |
          echo "📁 Build artifacts:"
          ls -lh dist/ || echo "No dist directory found"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/*.mcaddon
            dist/*.mcpack
          retention-days: 30

      - name: Commit and push version bump (only on main)
        if: github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add BP/manifest.json RP/manifest.json
          git commit -m "Auto-bump version after push" || exit 0
          git push origin main

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Test package integrity
        run: |
          echo "🧪 Testing package integrity..."
          for file in dist/*.mcaddon dist/*.mcpack; do
            if [ -f "$file" ]; then
              echo "✅ Testing: $(basename "$file")"
              unzip -t "$file" > /dev/null
              echo "✅ Package integrity verified"
            fi
          done

  release:
    needs: [build, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Generate release notes
        id: release_notes
        run: |
          echo "📝 Generating release notes..."
          
          # Get recent commits
          COMMITS=$(git log --oneline -10)
          
          # Create release notes
          cat > release_notes.md << 'EOF'
          ## Road Infrastructure v${{ needs.build.outputs.version }}
          
          ### 📊 Statistics
          - **Total Blocks**: ${{ needs.build.outputs.total_blocks }}
          - **BP Files**: ${{ needs.build.outputs.bp_files }}
          - **RP Files**: ${{ needs.build.outputs.rp_files }}
          
          ### 🛣️ Features
          - Complete road infrastructure system
          - Road markings and signs
          - Pedestrian elements (sidewalks, crossings)
          - Turn indicators and 3D elements
          
          ### 📋 Recent Changes
          EOF
          
          # Add commits to notes
          while IFS= read -r line; do
            if [ ! -z "$line" ]; then
              echo "- $line" >> release_notes.md
            fi
          done <<< "$COMMITS"
          
          cat >> release_notes.md << 'EOF'
          
          ### 🚀 Installation
          1. Download the .mcaddon file
          2. Open it in Minecraft Bedrock
          3. Enable the resource pack in Global Resources
          4. Enable 'Holiday Creator Features' in experiments
          5. Create or edit a world with the features enabled
          
          ### 📦 Files Included
          EOF
          
          # Add file list
          for file in dist/*.mcaddon dist/*.mcpack; do
            if [ -f "$file" ]; then
              SIZE=$(du -h "$file" | cut -f1)
              echo "- \`$(basename "$file")\` ($SIZE)" >> release_notes.md
            fi
          done
          
          # Read the notes and set output
          NOTES=$(cat release_notes.md)
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.build.outputs.version }}
          release_name: Road Infrastructure v${{ needs.build.outputs.version }}
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/*.mcaddon
          asset_name: RoadInfrastructure_v${{ needs.build.outputs.version }}.mcaddon
          asset_content_type: application/octet-stream

      - name: Upload Release Assets (.mcpack)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/*.mcpack
          asset_name: RoadInfrastructure_v${{ needs.build.outputs.version }}.mcpack
          asset_content_type: application/octet-stream 